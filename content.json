{"meta":{"title":"夜明的Blog","subtitle":"Daybreak","description":"Where would a south wind take us","author":"夜明","url":"daybreakland.top","root":"/"},"pages":[{"title":"guestbook","date":"2019-11-28T02:33:16.000Z","updated":"2019-11-28T02:33:40.287Z","comments":true,"path":"guestbook/index.html","permalink":"daybreakland.top/guestbook/index.html","excerpt":"","text":""}],"posts":[{"title":"图-6|最短路径","slug":"7.6最短路径","date":"2019-11-27T09:34:58.000Z","updated":"2019-11-27T09:17:47.991Z","comments":true,"path":"2019/11/27/7.6最短路径/","link":"","permalink":"daybreakland.top/2019/11/27/7.6%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/","excerpt":"本篇记录了数据结构图这一章学习的第六部分，即图的最短路径问题。","text":"本篇记录了数据结构图这一章学习的第六部分，即图的最短路径问题。 用带权的有向图表示一个交通运输网，图中： 顶点——表示城市 边——表示城市间的交通联系 权——表示此线路的长度或沿此线路运输所花的时间或费用等 问题：从某顶点出发，沿图的边到达另一顶点所经过的路径中，各边上权值之和最小的一条路径——最短路径。 从某个源点到其余各顶点的最短路径 方法一：迪杰斯特拉(Dijkstra)算法算法思想 首先，在这些最短路径中，长度最短的这条路径上必定只有一条弧，且它的权值是从源点出发的所有弧上权的最小值。 其次，第二条长度次短的最短路径只可能有两种情况： 1)或者只含一条从源点出发的弧且小于其它从源点出发的弧上的权值； 2)或者是一条只经过已求得最短路径的顶点的路径。 依次类推，按迪杰斯特拉算法先后求得的每一条最短路径必定只有两种情况，或者是由源点直接到达终点，或者是只经过已经求得最短路径的顶点到达终点。 求最短路径步骤 初使时令 S={V0},T={其余顶点}，T中顶点对应的距离值 若存在&lt;V0,Vi&gt;，为&lt;V0,Vi&gt;弧上的权值若不存在&lt;V0,Vi&gt;，为 从T中选取一个其距离值为最小的顶点W，加入S. 对T中顶点的距离值进行修改：若加进W作中间顶点，从V0到Vi的距离值比不加W的路径要短，则修改此距离值 重复上述步骤，直到S中包含所有顶点，即S=V为止 方法二：弗洛伊德(Floyd)算法算法思想逐个顶点试探法求最短路径步骤 初始时设置一个n阶方阵，令其对角线元素为0，若存在弧&lt;Vi,Vj&gt;，则对应元素为权值；否则为 逐步试着在原直接路径中增加中间顶点，若加入中间点后路径变短，则修改之；否则，维持原值 所有顶点试探完毕，算法结束","categories":[],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"daybreakland.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"图-5|拓扑排序","slug":"7.5拓扑排序及关键路径","date":"2019-11-27T09:14:58.000Z","updated":"2019-11-27T09:17:36.454Z","comments":true,"path":"2019/11/27/7.5拓扑排序及关键路径/","link":"","permalink":"daybreakland.top/2019/11/27/7.5%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%E5%8F%8A%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84/","excerpt":"本篇记录了数据结构图这一章学习的第五部分，即图的拓扑排序问题。","text":"本篇记录了数据结构图这一章学习的第五部分，即图的拓扑排序问题。 拓扑排序背景 顶点——表示课程 有向弧——表示先决条件，若课程i是课程j的先决条件，则图中有弧&lt;i,j&gt; 拓扑排序学生应按怎样的顺序学习这些课程，才能无矛盾、顺利地完成学业定义AOV网用顶点表示活动，用弧表示活动间优先关系的有向图称为顶点表示活动的网(Activity On Vertex network)，简称AOV网。 若&lt;vi,vj&gt;是图中有向边，则vi是vj的直接前驱，vj是vi的直接后继；AOV网中不允许有回路，这意味着某项活动以自己为先决条件； 拓扑排序的定义把AOV网络中各顶点按照它们相互之间的优先关系排列成一个线性序列的过程叫拓扑排序 -拓扑排序应用检测AOV网中是否存在环：对有向图构造其顶点的拓扑有序序列，若网中所有顶点都在它的拓扑序列，则该AOV网必定无环 方法 在有向图中选一个没有前驱的顶点且输出之； 从图中删除该顶点和所有以它为尾的弧； 重复上述两步，直至全部顶点均已输出，或图中不存在无前驱的顶点。算法实现以邻接表作存储结构, 把邻接表中所有入度为0的顶点进栈; 栈非空时，输出栈顶元素Vj并退栈； 在邻接表中查找Vj的直接后继Vk，把Vk的入度减1；若Vk的入度为0则进栈; 重复上述操作直至栈空为止。 若栈空时输出的顶点个数不是n，则有向图有环；否则，拓扑排序完毕 1234567891011121314151617181920Status TopologicalSort(ALGraph G) &#123; for(i = 0;i &lt;G.vexnum; ++ i ) //查找入度为为零的顶点 if(! Indegree[i]) //把入度为零的顶点进栈 push (S,i ); count = 0; //计数器置0 while (! StackEmpty(s)) &#123; pop(s, i); printf(i,Gvextices[i].data); ++count;//输出顶点、计数 for(p=G.vextices[i].firstarc; p ; p = p-&gt;nextarc) &#123; k = p-&gt;adjvex; //得到与输出顶点相邻接的顶点下标 if(! (--indegree[k])) push( S,k); //将邻接点的入度减1，将为零的入栈 &#125;//for &#125;//while if (count&lt;G.vexnum) return ERROR;//该图有回路 else return OK;&#125;//TopologicalSort 关键路径背景 把工程计划表示为有向图，用顶点表示事件，弧表示活动；每个事件表示在它之前的活动已完成，在它之后的活动可以开始；事件 V1——表示整个工程开始事件 V9——表示整个工程结束其中，T为所有以第j个顶点为头的弧的集合。 定义AOE网(Activity On Edge)边表示活动的网。AOE网是一个带权的有向无环图，其中顶点表示事件，弧表示活动，权表示活动持续时间 路径长度路径上各活动持续时间之和。 关键路径路径长度最长的路径叫关键路径。 Ve——事件Vj的最早发生时间Ve(j) 源点的最早发生时间为0，其余任一顶点Vj的最早发生时间，等于从源点出发沿着各条路径达到Vj时每条路径上权的累加和的最大值。计算公式为：**Ve(j)=Max{ve(i) + dut(&lt;i ,j&gt;)} &lt;i,j&gt;∈T, j = 1,2,3…n-1** Vl—事件的最迟发生时间Vl(j) 汇点的最迟发生时间Vl[n]等于汇点的最早发生时间Ve[n]。其余任一顶点Vi的最迟发生时间等于从汇点的最迟发生时间中减去从顶点Vi出发沿着各条路径达到汇点时，每条路径上权的累加和的最大值。最迟发生时间一般用下列公式计算: Vl(i)=Min{vl(j)-dut(&lt;i ,j&gt;)} &lt;i,j&gt; ∈S, i = n -2,..,0其中， S为所有以第i个顶点为尾的弧的集合。 e(i)——表示活动ai的最早开始时间l(i)——表示活动ai的最迟开始时间 设活动ai用弧&lt;j,k&gt;表示， 其持续时间记为：dut(&lt;j,k&gt;) 则有：（1）e(i)=Ve(j) //最早开始时间是弧尾事件的最早发生时间 （2）l(i)=Vl(k)-dut(&lt;j,k&gt;)//最迟开始时间是弧头事件的最晚发生时间减去活动的持续时间，即弧的权值 l(i)-e(i)——表示完成活动ai的时间余量 关键活动——关键路径上的活动叫关键活动，即l(i)=e(i)的活动 算法实现描述 输入顶点和弧信息，建立其邻接表 计算每个顶点的入度 对其进行拓扑排序 排序过程中求顶点的Ve[i] 将得到的拓扑序列进栈 按逆拓扑序列求顶点的Vl[i] 计算每条弧的e[i]和l[i],找出e[i]=l[i]的关键活动……没看，待更新","categories":[],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"daybreakland.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"图-4|图的连通性问题","slug":"7.4图的连通性问题","date":"2019-11-26T14:39:58.000Z","updated":"2019-11-27T09:17:56.773Z","comments":true,"path":"2019/11/26/7.4图的连通性问题/","link":"","permalink":"daybreakland.top/2019/11/26/7.4%E5%9B%BE%E7%9A%84%E8%BF%9E%E9%80%9A%E6%80%A7%E9%97%AE%E9%A2%98/","excerpt":"本篇记录了数据结构图这一章学习的第四部分，即图的连通性问题。","text":"本篇记录了数据结构图这一章学习的第四部分，即图的连通性问题。 图的连通性问题最小生成树问题提出要在n个城市间建立通信联络网，顶点——表示城市权——城市间建立通信线路所需花费代价希望找到一棵生成树，它的每条边上的权值之和（即建立该通信网所需花费的总代价）最小———最小代价生成树 n个城市间，最多可设置n(n-1)/2条线路 n个城市间建立通信网，只需n-1条线路 问题转化为：如何在可能的线路中选择n-1条，能把 所有城市（顶点）均连起来，且总耗费 （各边权值之和）最小构造最小生成树方法普里姆(Prim)算法/T(n)=O(V²)算法思想： 设连通网N=(V,{E}),点集U为已处理点集，最小生成树边集TE。 初始任取一点，加入U，使U={v0}； 在所有u∈U,v∈V-U的边(u,v)∈E中，找一条代价最小的边(u0,v0) 两点确定一条边，即在所有生成树邻接的边里找条最小的。 将(u0,v0)并入集合TE，同时v0并入U 把边并入生成树，点并入已处理点集。 重复操作直至U=V。克鲁斯卡尔(Kruskal)算法/O(E log E)算法思想： 设连通网N=(V,{E})，初始状态为只有n个顶点而无边的非连通图T=(V,{∅})，每个顶点自成一个连通分量 在E中选取代价最小的边，若该边依附的顶点落在T中不同的连通分量上，则将此边加入到T中； 否则，舍去此边，选取下一条代价最小的边依此类推，直至T中所有顶点都在同一连通分量上为止。 一开始所有点各自独立，遍历E集合选代价最小边，若该边的两个顶点落在不同连通分量上，就加进T，直到T里所有顶点全在一个连通分量上。","categories":[],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"daybreakland.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"图-3|图的遍历","slug":"7.3图的遍历","date":"2019-11-26T14:38:52.000Z","updated":"2019-11-27T09:18:05.263Z","comments":true,"path":"2019/11/26/7.3图的遍历/","link":"","permalink":"daybreakland.top/2019/11/26/7.3%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/","excerpt":"本篇记录了数据结构图这一章学习的第三部分，即图的遍历。","text":"本篇记录了数据结构图这一章学习的第三部分，即图的遍历。 深度优先遍历(DFS) 从图的某一顶点V0出发，访问此顶点；然后依次从V0的未被访问的邻接点出发，深度优先遍历图，直至图中所有和V0相通的顶点都被访问到；若此时图中尚有顶点未被访问，则另选图中一个未被访问的顶点作起点，重复上述过程，直至图中所有顶点都被访问为止 123456789101112131415161718192021222324//--- 下列算法使用的全局变量 ---Boolean visited[MAX]; // 访问标志数组Status (* VisitFunc)(int v); // 函数变量void DFS(Graph G, int v) &#123;// 从第v个顶点出发递归地深度优先遍历图G。 visited[v] = TRUE; VisitFunc(v); // 访问第v个顶点 for(w=FirstAdjVex(G,v);w!=0;w=NextAdjVex(G,v,w)) if(!visited[w]) DFS(G, w); // 对v的尚未访问的邻接顶点w递归调用DFS&#125;void DFSTraverse(Graph G, Status (*Visit)(int v)) &#123; // 对图G作深度优先遍历。 VisitFunc = Visit; for (v=0; v&lt;G.vexnum; ++v) visited[v] = FALSE; // 访问标志数组初始化 for (v=0; v&lt;G.vexnum; ++v) if (!visited[v]) DFS(G, v); // 对尚未访问的顶点调用DFS&#125; 广度优先遍历(BFS) 从图的某一顶点V0出发，访问此顶点后，依次访问V0的各个未曾访问过的邻接点；然后分别从这些邻接点出发，广度优先遍历图，直至图中所有已被访问的顶点的邻接点都被访问到；若此时图中尚有顶点未被访问，则另选图中一个未被访问的顶点作起点，重复上述过程，直至图中所有顶点都被访问为止 1234567891011121314151617181920void BFSTraverse( Graph G, status (*visit )(int v )) &#123; for( v = 0; v &lt; G.vexnum; ++v) visited[v] = FALSE; InitQueue( Q ); for( v = 0; v &lt; G.vexnum; ++ v) if( !visited[v] )&#123; visited[v] = TRUE; visit( v ); EnQueue( Q, v ); while( !QuqueEmpty( Q)) &#123; Dequeue( Q, u ); for(w=FirstAdjVex(G,u);w;w=NextAdjVex(G,u,w)) if( !Visited[w] )&#123; Visited[w]=TRUE; Visit( w ); Enqueue(Q,w); &#125;// if &#125;// while &#125;// if&#125;// BFSTraverse","categories":[],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"daybreakland.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"图-2|图的存储结构","slug":"7.2图的存储结构","date":"2019-11-26T14:38:30.000Z","updated":"2019-11-27T09:18:13.085Z","comments":true,"path":"2019/11/26/7.2图的存储结构/","link":"","permalink":"daybreakland.top/2019/11/26/7.2%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/","excerpt":"本篇记录了数据结构图这一章学习的第二部分，即图的存储结构。","text":"本篇记录了数据结构图这一章学习的第二部分，即图的存储结构。 1.数组表示法(邻接矩阵表示)有向图的邻接矩阵表示：无向图中顶点Vi的度TD(Vi)是邻接矩阵A中第 i 行元素之和. 2.邻接表 无向图中顶点Vi的度为第i个单链表中的结点数 无向图的邻接表 有向图中顶点Vi的出度为第i个单链表中的结点个数顶点Vi的入度为整个单链表中邻接点域值是i的结点个数 逆邻接表：有向图中对每个结点建立以Vi为头的弧的单链表有向图的邻接表和逆邻接表 3.有向图的十字链表表示法十字链表是有向图的一种存贮方式其中，图中的顶点用顶点结点单元表示。弧用弧结点单元表示。 弧节点单元 tailvex / headvex: 尾/头域：弧尾和弧头两个顶点在图中的位置 hlink: 弧头相同的下一条弧 tlink: 弧尾相同的下一条弧 info: 该弧的相关信息顶点节点单元 firstin: 顶点为弧头的第一个弧结点；//可求入度 firstout: 顶点为弧尾的第一个弧结点；//可求出度 data: 该结点的相关信息表示样例对第一个结点而言，蓝色线串起了以1为弧头的弧，绿线串起了以1为弧尾的弧无向图邻接多重表表示法邻接多重表是无向图的一种存贮方式其中，图中的顶点用顶点结点单元表示。边用边节点单元表示。与邻接表的差别在于 ，邻接表用2个顶点表示一条边，而邻接多重表用1个顶点表示一条边。边节点单元 mark,访问标志； ivex/jvex:边依符的两个顶点的位置； ilink/jlink:两个顶点的下一条边； info:边的信息顶点节点单元表示样例","categories":[],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"daybreakland.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"Hexo+github搭建博客纪实","slug":"Hexo-github搭建博客纪实","date":"2019-11-25T14:57:23.000Z","updated":"2019-11-26T06:54:53.111Z","comments":true,"path":"2019/11/25/Hexo-github搭建博客纪实/","link":"","permalink":"daybreakland.top/2019/11/25/Hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%BA%AA%E5%AE%9E/","excerpt":"简单记述了搭建博客的过程，类似Debug的过程，马克了期间参考的资料，之后应该会持续更新功能。","text":"简单记述了搭建博客的过程，类似Debug的过程，马克了期间参考的资料，之后应该会持续更新功能。 Hexo+github搭建博客纪实一、注册github仓库二、环境搭建&#8195;1.下载node.js和git&#8195;&#8195;&#8195;git bash（用于授权SHH和安装hexo系列操作） &#8195;2.SHH授权&#8195;&#8195;&#8195;公钥与秘钥 三、Hexo系列操作&#8195;1.下载安装&#8195;2.初始化+本地预览&#8195;&#8195;&#8195;自然要换好看的主题 &#8195;3.上传到github四、域名转接&#8195;1.购买域名&#8195;2.在github设置domain五、搭建过程&#8195;1.参考教程 流程（系统）https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html#%E4%BD%BF%E7%94%A8hexo%E5%86%99%E5%8D%9A%E5%AE%A2 流程（易懂）https://www.cnblogs.com/trista222/p/8017300.html 域名绑定https://blog.csdn.net/mqdxiaoxiao/article/details/92799543&#8195;2.DebugERROR1 “the CNAME is already taken” 问题描述： 搭建完博客，每次更新之后，使用域名地址访问博客都会404报错并且github邮箱账户会收到一封Waring Email： The page build completed successfully, but returned the following warning for the ‘master’ branch:Your CNAME file was ignored because this repository is automatically hosted from yourUsername.github.io already. See https://help.github.com/articles/setting-up-your-pages-site-repository/For information on troubleshooting Jekyll see: https://help.github.com/articles/troubleshooting-jekyll-buildsIf you have any questions you can contact us by replying to this email. https://wangqy.cc/2018/05/26/CNAME/ 咱也不知道发生了啥，咱也不造去哪儿问，网上搜罗了下，发现了相同情况了老哥：https://wangqy.cc/2018/05/26/CNAME/原因是 setting 下 github pages 的 custom domain 清空了，需要重新设置来生成 CNAME 文件。我们的初步解决方案，便是每次更新完去github仓库的settings里把domain调成自己的域名。 然而人是贪婪的，也是懒的，次次更新次次调设置太繁琐了，于是又摸索了下，受名为saucxs的大佬文章启发：https://www.cnblogs.com/chengxs/p/7496265.html找到了进阶解决方案，修改_config.yml文件： `# URLurl: daybreakland.top【原来这里是“yourUsername.github.io”】root: /permalink: :year/:month/:day/:title/permalink_defaults:pretty_urls: trailing_index: true # Set to false to remove trailing index.html from permalinks 这样就算是彻底解决了问题。 &#8195;3.功能和技巧 19.11.23 插入图片https://blog.csdn.net/L_201607/article/details/81176439 19.11.23 插入占位符 123&amp;#8195;一个中文的占位符&amp;#8194;半个中文的占位符&amp;#8197;四分之一的中文占位符","categories":[],"tags":[]},{"title":"图-1|图的定义和术语","slug":"7.1图的定义和术语","date":"2019-11-25T13:18:14.000Z","updated":"2019-11-27T09:18:22.707Z","comments":true,"path":"2019/11/25/7.1图的定义和术语/","link":"","permalink":"daybreakland.top/2019/11/25/7.1%E5%9B%BE%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E6%9C%AF%E8%AF%AD/","excerpt":"本篇记录了数据结构图这一章学习的第一部分，即图的定义和术语。","text":"本篇记录了数据结构图这一章学习的第一部分，即图的定义和术语。 图的定义和术语有向图 顶点：数据 弧表示方法：&lt;v,w&gt;有序对 弧头 v 弧尾 w无向图 边 表示方法：（v,m）无序对&lt;&gt; 如何表示一个无向图？G1 =(V1 , {E1} )V1={v1,v2,v3,v4,v5} G1={ (v1,v2),(v2,v3),(v3,v4),(v3,v5),(v1,v4),(v2,v5) }图的抽象数据类型定义：123456ADT Graph&#123; 数据对象V：顶点集； 数据关系R：R=&#123;VR&#125; VR=&#123;&lt;v,w&gt;|v,w∈V,且P(v,w), &lt;v,w&gt;表示从v到w的弧， P(v,w)定义了弧&lt;v,w&gt;的意义或信息&#125;&#125; 图的基本操作1 CreateGraph(&amp;G, V, VR);初始条件：V是图的顶点集，VR是图中弧的集合操作结果：按V和VR的定义构造图G2 DestroyGraph(&amp;G);初始条件：图G存在操作结果：销毁图G3 LocateVex(G,u);初始条件：图G存在，u和G中顶点有相同特征操作结果：若G中存在顶点u，则返回该顶点在图中位置；否则返回其它信息。4 GetVex(G, v);初始条件：图G存在，v是G中某个顶点操作结果：返回v的值5 PutVex(&amp;G, v, value);初始条件：图G存在，v是G中某个顶点操作结果：对v赋值value6 FirstAdjVex(G, v);初始条件：图G存在，v是G中某个顶点操作结果：返回v的第一个邻接顶点。若顶点在G中没有邻接顶点，则返回“空”。7 NextAdjVex(G, v, w);初始条件：图G存在，v是G中某个顶点，w是v的邻接顶点。操作结果：返回v的（相对于w的）下一个邻接顶点。若w是v的最后一个邻接点，则返回“空”。8 InsertVex(&amp;G, v);初始条件：图G存在，v和图中顶点有相同特征。操作结果：在图G中增添新顶点v9 DeleteVex(&amp;G, v);初始条件：图G存在，v和图中顶点有相同特征操作结果：删除G中顶点v及相关的弧10 InsertArc(&amp;G, v, w); 初始条件：图G存在，v和w是G中两个顶点。 操作结果：在G中增添弧&lt;v,w&gt;，若G是无向的，则还增添对称弧&lt;w,v&gt;11 DeleteArc(&amp;G, v, w); 初始条件：图G存在，v和w是G中两个顶点。 操作结果：在G中删除弧&lt;v,w&gt;，若G是无向的，则还删除对称弧&lt;w,v&gt;12 DFSTraverse(G, v, Visit( )); 初始条件：图G存在，v是G中某个顶点，Visit是顶点的应用函数。 操作结果：从顶点v起深度优先遍历图G，对每个顶点调用函数Visit一次且仅一次。一旦visit( )失败，则操作失败13 BFSTraverse(G, v, Visit( )); 初始条件：图G存在，v是G中某个顶点，Visit是顶点的应用函数。 操作结果：从顶点v起广度优先遍历图G，对每个顶点调用函数Visit一次且一次。一旦visit( )失败，则操作失败子图 设有两个图G =（V,E）G1 =（V1,E1）,若V1∈V,E1 ∈ E,则称 G1是G的子图； 编辑器打不出集合包含符号，先用∈代替 常见的图 1.有向完全图n个顶点的有向图最大边数是n(n-1) 2.完全图n个顶点的无向图最大边数是n(n-1)/2 3.稀疏图/稠密图边数少为前者，多为后者 4.权与图的边或弧相关的数为权 5.网带权的图顶点的度 无向图中，顶点的度为与每个顶点相连的边数 有向图中，顶点的度分成入度与出度 入度：以该顶点为头的弧的数目 出度：以该顶点为尾的弧的数目 邻接点 对于无向图G=(V,{E})，如果边 (v,v’)∈E，则称顶点v和v’互为邻接点(Adjacent)，即v和v’相邻接。边(v,v’) 依附(Incident) 于顶点v和v’或者说 (v,v‘)和顶点v和v’相关联。 对于有向图G=(V,{A}))，如果弧&lt;v,v’&gt;∈A，则称顶点v邻接到顶点v’,顶点v’邻接自顶点v，弧&lt;v,v’&gt;和顶点v,v’相关联**。 路径两个顶点之间的顶点序列，该序列的每个顶点与其前驱是邻接点，每个顶点与其后继也是邻接点 路径长度——沿路径边的数目或沿路径各边权值之和 回路——第一个顶点和最后一个顶点相同的路径叫~ 简单路径——序列中顶点不重复出现的路径叫~ 简单回路——除了第一个顶点和最后一个顶点外，其余顶点不重复出现的回路叫~ 连通图（强连通图） 无向图中，若任意两点都存在路径，此图是连通图。 有向图中，若任意两点都存在互通路径，此图是强连通图。 连通分量无向图G的极大连通子图成为G的连通分量。 极大连通子图：该子图是G连通子图，将G的任何不在该子图中的顶点加入，子图不再连通。 强连通分量有向图D的极大强连通子图成为D的强连通分量。 极大强连通子图意思是：该子图是D强连通子图，将D的任何不在该子图中的顶点加入，子图不再是强连通的。 下面总结了如何判断连通子图是不是极大或极小连通子图。（这个问题好像在离散数学提到过） 若在一个连通子图中，包含了与其中顶点有关所有边（the more the better），则是极大连通子图；若只包含了必不可少的边（the less the better），那就是极小连通子图。 关于此概念，下面的博文讲的很好，上面的总结也是受教于这位博主。原文链接：https://blog.csdn.net/merlyn_yang/article/details/82467980 版权声明：本文为CSDN博主「merlyn_yang」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。 生成树 包含无向图G所有顶点的的极小连通子图称为G生成树。它含有图中全部顶点，但只有足以构成一棵树的n-1条边。一棵有n个顶点的生成树有且仅有n-1条边。","categories":[],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"daybreakland.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"枕草子","slug":"枕草子-春曙为最","date":"2019-11-23T09:05:52.000Z","updated":"2019-11-25T14:27:54.359Z","comments":true,"path":"2019/11/23/枕草子-春曙为最/","link":"","permalink":"daybreakland.top/2019/11/23/%E6%9E%95%E8%8D%89%E5%AD%90-%E6%98%A5%E6%9B%99%E4%B8%BA%E6%9C%80/","excerpt":"","text":"清少纳言随笔《枕草子》的第一篇，恬淡自由，勾勒出四时之美。 まくらのそうし·春はあけぼの &#8195;春は、あけぼの。やうやう白くなりゆく、山ぎは少し明りて、紫だちたる雲のほそくたなびきたる。 夏は、夜。月のころはさらなり、闇もなほ、蛍の多く飛びちがひたる。また、ただ一つ二つなど、ほのかにうち光りて行くも、をかし。雨など降るも、をかし。 秋は、夕暮れ。夕日のさして、山の端いと近うなりたるに、烏の寝どころへ行くとて、三つ四つ、二つ三つなど、飛び急ぐさへあはれなり。まいて、雁などのつらねたるが、いと小さく見ゆるは、いとをかし。日入り果てて、風の音、虫の音(ね)など、はた言ふべきにあらず。 冬は、つとめて。雪の降りたるは言ふべきにもあらず。霜のいと白きも、またさらでも、いと寒きに、火など急ぎおこして、炭持て渡るも、いとつきづきし。昼になりて、ぬるくゆるびもていけば、火桶の火も白き灰がちになりて、わろし。 枕草子·春曙为最 &#8195;春，曙为最。逐渐转白的山顶，开始稍露光明，泛紫的细云轻飘其上。 &#8195;夏则夜。有月的时候自不待言，无月的暗夜，也有群萤交飞。若是下场雨什么的，那就更有情味了。 &#8195;秋则黄昏。夕阳照耀，近映山际，乌鸦返巢，三只、四只、两只的飞过，平添感伤。又有时见雁影小小，列队飞过远空，尤绕风情。而况，日入以后，尚有风声虫鸣。 &#8195;冬则晨朝。降雪时不消说，有时霜色皑皑，即使无雪亦无霜，寒气凛冽，连忙生一盆火，搬运炭火跑过走廊，也挺合时宜；只可惜晌午时分，火盆里头炭木渐蒙白灰，便无甚可赏了。 翻译来源：《枕草子》（清少纳言著，林月文译）原文来源：http://www.eonet.ne.jp/~log-inn/03honkan.htm","categories":[],"tags":[{"name":"摘抄","slug":"摘抄","permalink":"daybreakland.top/tags/%E6%91%98%E6%8A%84/"}]},{"title":"论文Introduction改写","slug":"hello-world","date":"2019-11-22T12:13:32.936Z","updated":"2019-11-24T03:02:35.916Z","comments":true,"path":"2019/11/22/hello-world/","link":"","permalink":"daybreakland.top/2019/11/22/hello-world/","excerpt":"提要：论文Introduction部分还是简洁为妙。 其中，尤其是需要答辩的论文，毕竟答辩期间Introduction部分时间占比是相当之少的。所以改写版本相比原版删去或整合了很多内容，希望没有改变作者原本的意思。 同时，由于这一部分的本意是阐述写作目的，提出问题并强调研究意义，其中要描述本领域研究现状，又要突出强调自己研究的拓展、创新之处，为正文的论述做准备，所以语句应尽量做到不拖泥带水，过渡和转折到位，充分为正文蓄势。","text":"提要：论文Introduction部分还是简洁为妙。 其中，尤其是需要答辩的论文，毕竟答辩期间Introduction部分时间占比是相当之少的。所以改写版本相比原版删去或整合了很多内容，希望没有改变作者原本的意思。 同时，由于这一部分的本意是阐述写作目的，提出问题并强调研究意义，其中要描述本领域研究现状，又要突出强调自己研究的拓展、创新之处，为正文的论述做准备，所以语句应尽量做到不拖泥带水，过渡和转折到位，充分为正文蓄势。 Introduction 简洁地交代下背景&amp;&amp;现状 Since the discovery of X rays in 1895,radiation has been shrouded in myths and partly as a doomsday power destined to cause the ultimate destruction of mankind. In our own time, fear seems to be the prevalent characteristic of the public perception of radiation phenomena, and the treatment in the media of incidents like the Chernobyl accident has greatly contributed to the spreading of uneasiness and fear. 结合背景，交代下写作目的 Due to above background, the general public’s perception towards radiation is mostly shallow, for most of them are lacking of basic knowledge of radiation. Why should we expect the public to know something about radioactivity and radiation? Three of the most evident answers are the following: The pragmatic reasonPeople should be capable of protecting themselves from the harmful effects of radiation as well as avoiding excessive fear. The democratic reasonPeople should be capable of informed judgements in political matters involving radiation phenomena, nuclear energy, waste disposal, exposure limit etc. The educational reasonThe individual derives pleasure and fulfillment from knowing something about the world around him/her. 介绍相关问题地研究状况，指出他人局限，强调本篇地研究更具有意义和代表性 A critical task is to detect how much understanding the mass have about the radioactivity and radiation via doing a systematic investigation and study. For instant, Lijnse et al. described concepts of radioactivity and radiation held by 15- and 16-year-old pupils in the Netherlands, and Eijkelhof and Millar analyzed British newspaper reports of the Chernobyl accident to identify features of the lay understanding of radiation phenomena. However, today we are to focus on doing a survey on a rather more typical and representative group, which the previous research didn’t perform so well. 本篇调查方式和主体简介，引入正文 The present survey was conducted to investigate the understanding of radiation phenomena and risk among Norwegians with a reasonable level of general education, but lacking specialization in physical science.","categories":[],"tags":[]}]}